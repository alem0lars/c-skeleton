{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"C Skeleton","name":"C-skeleton","body":"# C Skeleton\r\n## Author\r\n* [Alessandro Molari](http://molarialessandro.info)\r\n\r\n## Vision / Requirements\r\nI don't like Make or CMake so I have created a small (and portable between projects) build system using Rake, with the following main features:\r\n* **Compile the code**\r\n* **Generate the reports** (e.g. the documentation)\r\n* **Run the software** (in standalone mode) and the unit tests\r\n* Perform some kind of **code analysis** (static, dynamic, memory leaks, ...)\r\nThe build system should be configurable but easy-to-use, so no mandatory configurations should be needed (a.k.a. **0-time setup**)\r\n\r\n## Usage\r\n`rake <task>`\r\nwhere task is:\r\n* `compile`: Compile the sources (mainly using cc)\r\n* `run`: Run the software (in standalone mode)\r\n* `run_tests`: Unit testing (using CUnit)\r\n* `mem_leaks_analysis`: Check for memory leaks (using valgrind)\r\n* `static_analysis`: Perform the static analysis (using splint)\r\n* `doc`: Generate the documentation (using doxygen)\r\n\r\nThere are also other rake tasks and shortcuts. To list them run `rake -T`\r\n\r\n***\r\n\r\nThere is no need to configure the build system (0-setup), but if you want\r\nyou can modify the configuration variables in the Rakefile\r\n\r\n## Directory conventions\r\nUsing the following directory conventions is not mandatory, but if you want to change the conventions you will need to also change the configuration variables in the Rakefile.\r\nThese are the directory conventions:\r\n* `out` is where the program is built and maybe other artifacts are generated\r\n* `tests` will hold eventually tests\r\n* `src` holds the source code\r\n* `tmp` is a temporary directory\r\n\r\n## Requirements\r\nTo use the build system you need:\r\n* Rake (and Ruby)\r\nFor each task there could be additional requirements (specified above in the usage).\r\n","google":""}